{% extends "layout" %} {% block content %}
<div class="center">
  <form id="form-get-entry" class="form-get-entry" name="form-get-entry" method="post" accept-charset="UTF-8"
    action="{{global.download_url}}">
    <div id="modal-get-entry" class="modal fade" tabindex="-1" role="dialog">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <a class="close" data-dismiss="modal">Ã—</a>
            <h3>Are you human?</h3>
          </div>
          <div class="modal-body">
            <div style="text-align: left; margin-bottom: 10px;">
              <p>By proceeding to a download you:</p>
              <ol>
                <li>Agree to a
                  <strong>temporary preview</strong> of the implied data sample,
                </li>
                <li>Agree that this download is intended and authorized only for
                  <strong>research use</strong>,
                </li>
                <li>Agree to
                  <strong>purging all local copies</strong> of the data at the
                  immediate end of the research experiment,
                </li>
                <li>Agree to protecting the
                  <strong>original copyright</strong> of all implied data,
                </li>
                <li>Agree to
                  <strong>provide attribution</strong> as appropriate.
                </li>
              </ol>
              <br>
            </div>
          </div>
          <div class="modal-footer">
            <input class="btn btn-success" type="submit" value="Get
              {{global.entry_name}}" id="btn-get-entry">
          </div>
        </div>
      </div>
    </div>
  </form>
</div>

<script src='/public/js/jszip.min.js'></script>
<script>
  $(document).ready(function () {
    $("#form-get-entry").submit(function (e) {
      // We'll AJAX our fetch, to have a handle on permissions
      e.preventDefault();
      var $form = $(this);
      $("body").css("cursor", "progress");
      var xhr = new XMLHttpRequest();
      xhr.responseType = "arraybuffer";
      xhr.onreadystatechange = function () {
        console.log("onreadystatechange: ", this);
        if (this.readyState == 4) { // Only process when done.
          if (this.status != 200) {
            // Something went wrong, throw out the localStorage and re-auth (Redis could've fallen, etc)
            $("#modal-get-entry").modal("show");
            return;
          }
          JSZip.loadAsync(xhr.response).then(function (zip) {
            var filenames = [];
            var promises = [];
            var data_url_pending = 0;
            $.each(zip.files, function (filename, fileobject) {
              console.log("Unpacking: ", filename);
              // We only keep HTML and PNG files, discarding anything else that may have been preserved in the conversion result ZIP archive
              if (filename.match(/\.(html|log|js|css)$/i)) {
                filenames.push(filename);
                promises.push(fileobject.async("text"));
              } else if (filename.match(/\.(png|jpg|svg)$/i)) {
                data_url_pending++;
                filenames.push(filename);
                promises.push(fileobject.async("uint8array"));
              }
            });

            var main_content;
            var conversion_report = '';
            var data_url_map = {};
            var js_collected = '';
            var css_collected = '';
            Promise.all(promises).then(function (values) {
              $.each(filenames, function (i, filename) {
                var data = values[i];
                if (filename.match(/\.html$/i)) {
                  main_content = data;
                } else if (filename.match(/\.log$/i)) {
                  conversion_report = data;
                } else if (filename.match(/\.css$/i)) {
                  css_collected += "\n" + data + "\n";
                } else if (filename.match(/\.js$/i)) {
                  js_collected += "\n" + data + "\n";
                } else { // only image files in else case
                  var reader = new FileReader();
                  // Huge? Yes. But it survives document.write() in firefox,
                  // which an ObjectURL for a blob apparently does *not*
                  reader.addEventListener("loadend", function () {
                    data_url_map[filename] = reader.result;
                    if (Object.keys(data_url_map).length >= data_url_pending) {
                      console.log("Data URLs generated.");
                      final_main_content_write(data_url_map, conversion_report, main_content, js_collected, css_collected);
                    }
                  });
                  var fileblob = new Blob([data], { type: 'image/png' });
                  reader.readAsDataURL(fileblob);
                }
              });
              if (data_url_pending == 0) { // simple paper with no data blobs, just render
                console.log("No Data URLs present.");
                final_main_content_write({}, conversion_report, main_content, js_collected, css_collected);
              }
            });
          });
        }
      }
      xhr.open('POST', $(this).attr("action"));
      xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
      var xhr_payload = $(this).serialize();
      xhr.send(xhr_payload);
    });

    $("#form-get-entry").submit();
    return;
  });
  function final_main_content_write(data_url_map, conversion_report, main_content, js_collected, css_collected) {
    // ensure main_content is a string if undefined
    if (typeof (main_content) == "undefined") {
      main_content = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta http-equiv="Content-Type" content="text/html" />
            <meta charset="utf-8" />
            <title> Entry preview fallback | CorTeX Framework</title>
            <link rel="stylesheet" type='text/css' href='/public/css/cortex.css'>
            <link rel="icon" type="image/x-icon" href="/favicon.ico">
            <meta name="language" content="English">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body>
          <div class="ltx_page_main">
            <div class="ltx_page_content">
              <article class="ltx_document">
              </article>
            </div>
          </div>
        </body>
        </html>`;
    }

    // Add all assets as data URLs.
    $.each(data_url_map, function (filename, newurl) {
      let escaped_name = 'src=[\'"]' + filename.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + '[\'"]';
      new_src = "src=\"" + newurl + "\"";
      main_content = main_content.replace(new RegExp(escaped_name, 'g'), new_src);
    });

    // If a conversion log is present, attach it as a trailing section
    if (conversion_report.length > 0) {
      var html_report = '<section id="latexml-conversion-report" class="ltx_section ltx_conversion_report">' +
        '<h2 class="ltx_title ltx_title_section">Cortex Conversion Report</h2>' +
        '<div id="S1.p1" class="ltx_para">' +
        '<p class="ltx_p">' +
        conversion_report.split("\n").join('</p><p class="ltx_p">');
      '</p>' +
        '</div></section></article>';
      main_content = main_content.replace(/<\/article>/, html_report);
    }

    // Apply a style of choice to the article, default is TeX.js
    // let style = "texjs";
    // Default is now the "ar5iv" style.
    let style = "ar5iv";
    if (window.location.href.includes("/engrafo")) {
      style = "engrafo";
    } // can still be overridden by the ?style= parameter

    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
      sURLVariables = sPageURL.split('&'),
      sParameterName,
      i;

    for (i = 0; i < sURLVariables.length; i++) {
      sParameterName = sURLVariables[i].split('=');

      if (sParameterName[0] === "style" && (sParameterName[1] !== undefined)) {
        style = sParameterName[1];
      }
    }

    var fire_loaded = '<script> ' +
      ' var DOMContentLoaded_event = document.createEvent("Event"); ' +
      ' DOMContentLoaded_event.initEvent("DOMContentLoaded", true, true); ' +
      ' var fire_loaded = function(){ ' +
      '  window.document.dispatchEvent(DOMContentLoaded_event); ' +
      '  $("body").css("cursor", "auto");' +
      ' }; ' +
      ' var fire_loaded_loop = window.setInterval(fire_loaded, 2000);' +
      ' window.setTimeout(function(){clearInterval(fire_loaded_loop)}, 6000); ' +
      '</' + 'script>';
    var latexml_css = ["amsart", "apj", "article", "book", "cv", "listings", "report", "svjour", "ulem"];
    var maybe_mathjax_js = '<script>' +
      'var agent = navigator.userAgent; ' +
      'var canMathML = typeof(MathMLElement) == "function"; ' +
      'if (!canMathML) {' +
      'var el = document.createElement("script");' +
      'el.src = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js";' +
      'document.querySelector("head").appendChild(el); }' +
      '</' + 'script>';

    if (main_content.match(/<\/head>/)) {
      if (style == "simple") {
        var simple_css = '<link media="all" rel="stylesheet" href="//latexml.mathweb.org/css/external/LaTeXML.css">' + "\n" + '<link media="all" rel="stylesheet" href="//latexml.mathweb.org/css/external/ltx-article.css">';
        main_content = main_content.replace(/<\/head>/, simple_css + "\n</head>");
        main_content = main_content.replace(/<\/body>/, "\n" + maybe_mathjax_js + "\n" + fire_loaded + "\n</body>");
      } else if (style == "engrafo") {
        // drop known local asset links, will re-insert dynamically.
        main_content = main_content.replace(/<link rel\=\"stylesheet\" href=\"index\.css\" type=\"text\/css\">/, "")
          .replace("<script src=\"index\.js\" type=\"text\/javascript\"><\/script>", "");
        if (css_collected.length > 0) {
          main_content = main_content.replace(/<\/head>/, "<style>\n" + css_collected + "\n</style>\n</head>");
        }
        if (js_collected.length > 0) {
          main_content = main_content.replace(/<\/body>/, "\n<script>\n" + js_collected + "\n</" + "script>\n" + fire_loaded + "\n</body>");
        }
      } else if (style && latexml_css.indexOf(style) !== -1) {
        var simple_css = '<link media="all" rel="stylesheet" href="//latexml.mathweb.org/css/external/LaTeXML.css">' + "\n" + '<link media="all" rel="stylesheet" href="//latexml.mathweb.org/css/external/ltx-' + style + '.css">';
        main_content = main_content.replace(/<\/head>/, simple_css + "\n</head>");
        main_content = main_content.replace(/<\/body>/, "\n" + maybe_mathjax_js + "\n" + fire_loaded + "\n</body>");
      } else { // load ar5iv.css by default
        var simple_css = '<link media="all" rel="stylesheet" href="//cdn.jsdelivr.net/gh/dginev/ar5iv-css@0.8.3/css/ar5iv-fonts.min.css">'+"\n"+
          '<link media="all" rel="stylesheet" href="//cdn.jsdelivr.net/gh/dginev/ar5iv-css@0.8.3/css/ar5iv.min.css">';
        main_content = main_content.replace(/<\/head>/, simple_css + "\n</head>");
        main_content = main_content.replace(/<\/body>/, "\n" + maybe_mathjax_js + "\n" + fire_loaded + "\n</body>");
      }
    }
    document.write(main_content);
  }
</script> {% endblock content %}