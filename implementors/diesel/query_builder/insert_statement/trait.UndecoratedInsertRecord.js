(function() {var implementors = {};
implementors["cortex"] = [{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/tasks/struct.table.html\" title=\"struct cortex::schema::tasks::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewTask.html\" title=\"struct cortex::models::NewTask\">NewTask</a>","synthetic":false,"types":["cortex::models::tasks::NewTask"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/log_infos/struct.table.html\" title=\"struct cortex::schema::log_infos::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewLogInfo.html\" title=\"struct cortex::models::NewLogInfo\">NewLogInfo</a>","synthetic":false,"types":["cortex::models::messages::NewLogInfo"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/log_warnings/struct.table.html\" title=\"struct cortex::schema::log_warnings::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewLogWarning.html\" title=\"struct cortex::models::NewLogWarning\">NewLogWarning</a>","synthetic":false,"types":["cortex::models::messages::NewLogWarning"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/log_errors/struct.table.html\" title=\"struct cortex::schema::log_errors::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewLogError.html\" title=\"struct cortex::models::NewLogError\">NewLogError</a>","synthetic":false,"types":["cortex::models::messages::NewLogError"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/log_fatals/struct.table.html\" title=\"struct cortex::schema::log_fatals::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewLogFatal.html\" title=\"struct cortex::models::NewLogFatal\">NewLogFatal</a>","synthetic":false,"types":["cortex::models::messages::NewLogFatal"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/log_invalids/struct.table.html\" title=\"struct cortex::schema::log_invalids::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewLogInvalid.html\" title=\"struct cortex::models::NewLogInvalid\">NewLogInvalid</a>","synthetic":false,"types":["cortex::models::messages::NewLogInvalid"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/worker_metadata/struct.table.html\" title=\"struct cortex::schema::worker_metadata::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewWorkerMetadata.html\" title=\"struct cortex::models::NewWorkerMetadata\">NewWorkerMetadata</a>","synthetic":false,"types":["cortex::models::worker_metadata::NewWorkerMetadata"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/services/struct.table.html\" title=\"struct cortex::schema::services::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewService.html\" title=\"struct cortex::models::NewService\">NewService</a>","synthetic":false,"types":["cortex::models::services::NewService"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/corpora/struct.table.html\" title=\"struct cortex::schema::corpora::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewCorpus.html\" title=\"struct cortex::models::NewCorpus\">NewCorpus</a>","synthetic":false,"types":["cortex::models::corpora::NewCorpus"]},{"text":"impl&lt;'insert&gt; UndecoratedInsertRecord&lt;<a class=\"struct\" href=\"cortex/schema/historical_runs/struct.table.html\" title=\"struct cortex::schema::historical_runs::table\">table</a>&gt; for <a class=\"struct\" href=\"cortex/models/struct.NewHistoricalRun.html\" title=\"struct cortex::models::NewHistoricalRun\">NewHistoricalRun</a>","synthetic":false,"types":["cortex::models::historical_runs::NewHistoricalRun"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()